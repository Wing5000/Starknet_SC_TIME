import { TxRow } from '../types'
export function topCallers(rows:TxRow[], limit=100){ const m=new Map<string,{count:number;last:number}>(); for(const r of rows){ const v=m.get(r.caller)||{count:0,last:0}; v.count++; v.last=Math.max(v.last,r.timestamp); m.set(r.caller,v) } const total=rows.length||1; return [...m.entries()].sort((a,b)=>b[1].count-a[1].count).slice(0,limit).map(([address,v],i)=>({rank:i+1,address,count:v.count,share:(v.count/total)*100,last:v.last})) }
export function methodCounts(rows:TxRow[], limit=20){ const m=new Map<string,number>(); for(const r of rows){ const k=r.entrypoint||'â€”'; m.set(k,(m.get(k)||0)+1) } return [...m.entries()].sort((a,b)=>b[1]-a[1]).slice(0,limit).map(([name,count])=>({name,count})) }
export function kpis(rows:TxRow[]){ const total=rows.length; const callers=new Set(rows.map(r=>r.caller)).size; const avgFee= total? rows.reduce((s,r)=>s+r.fee,0)/total:0; const lastTs= rows.reduce((m,r)=>Math.max(m,r.timestamp),0); return { total, callers, avgFee, lastTs } }
